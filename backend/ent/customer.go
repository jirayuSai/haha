// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/jirayuSai/app/ent/customer"
	"github.com/jirayuSai/app/ent/gender"
	"github.com/jirayuSai/app/ent/personal"
	"github.com/jirayuSai/app/ent/title"
)

// Customer is the model entity for the Customer schema.
type Customer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CustomerName holds the value of the "CustomerName" field.
	CustomerName string `json:"CustomerName,omitempty"`
	// Address holds the value of the "Address" field.
	Address string `json:"Address,omitempty"`
	// PhoneNumber holds the value of the "PhoneNumber" field.
	PhoneNumber string `json:"PhoneNumber,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomerQuery when eager-loading is set.
	Edges       CustomerEdges `json:"edges"`
	Gender_ID   *int
	Personal_ID *int
	Title_ID    *int
}

// CustomerEdges holds the relations/edges for other nodes in the graph.
type CustomerEdges struct {
	// Genders holds the value of the genders edge.
	Genders *Gender
	// Personals holds the value of the personals edge.
	Personals *Personal
	// Titles holds the value of the titles edge.
	Titles *Title
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// GendersOrErr returns the Genders value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerEdges) GendersOrErr() (*Gender, error) {
	if e.loadedTypes[0] {
		if e.Genders == nil {
			// The edge genders was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: gender.Label}
		}
		return e.Genders, nil
	}
	return nil, &NotLoadedError{edge: "genders"}
}

// PersonalsOrErr returns the Personals value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerEdges) PersonalsOrErr() (*Personal, error) {
	if e.loadedTypes[1] {
		if e.Personals == nil {
			// The edge personals was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: personal.Label}
		}
		return e.Personals, nil
	}
	return nil, &NotLoadedError{edge: "personals"}
}

// TitlesOrErr returns the Titles value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerEdges) TitlesOrErr() (*Title, error) {
	if e.loadedTypes[2] {
		if e.Titles == nil {
			// The edge titles was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: title.Label}
		}
		return e.Titles, nil
	}
	return nil, &NotLoadedError{edge: "titles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Customer) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // CustomerName
		&sql.NullString{}, // Address
		&sql.NullString{}, // PhoneNumber
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Customer) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // Gender_ID
		&sql.NullInt64{}, // Personal_ID
		&sql.NullInt64{}, // Title_ID
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Customer fields.
func (c *Customer) assignValues(values ...interface{}) error {
	if m, n := len(values), len(customer.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field CustomerName", values[0])
	} else if value.Valid {
		c.CustomerName = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Address", values[1])
	} else if value.Valid {
		c.Address = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field PhoneNumber", values[2])
	} else if value.Valid {
		c.PhoneNumber = value.String
	}
	values = values[3:]
	if len(values) == len(customer.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field Gender_ID", value)
		} else if value.Valid {
			c.Gender_ID = new(int)
			*c.Gender_ID = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field Personal_ID", value)
		} else if value.Valid {
			c.Personal_ID = new(int)
			*c.Personal_ID = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field Title_ID", value)
		} else if value.Valid {
			c.Title_ID = new(int)
			*c.Title_ID = int(value.Int64)
		}
	}
	return nil
}

// QueryGenders queries the genders edge of the Customer.
func (c *Customer) QueryGenders() *GenderQuery {
	return (&CustomerClient{config: c.config}).QueryGenders(c)
}

// QueryPersonals queries the personals edge of the Customer.
func (c *Customer) QueryPersonals() *PersonalQuery {
	return (&CustomerClient{config: c.config}).QueryPersonals(c)
}

// QueryTitles queries the titles edge of the Customer.
func (c *Customer) QueryTitles() *TitleQuery {
	return (&CustomerClient{config: c.config}).QueryTitles(c)
}

// Update returns a builder for updating this Customer.
// Note that, you need to call Customer.Unwrap() before calling this method, if this Customer
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Customer) Update() *CustomerUpdateOne {
	return (&CustomerClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Customer) Unwrap() *Customer {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Customer is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Customer) String() string {
	var builder strings.Builder
	builder.WriteString("Customer(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", CustomerName=")
	builder.WriteString(c.CustomerName)
	builder.WriteString(", Address=")
	builder.WriteString(c.Address)
	builder.WriteString(", PhoneNumber=")
	builder.WriteString(c.PhoneNumber)
	builder.WriteByte(')')
	return builder.String()
}

// Customers is a parsable slice of Customer.
type Customers []*Customer

func (c Customers) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
