// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/jirayuSai/app/ent/customer"
	"github.com/jirayuSai/app/ent/gender"
	"github.com/jirayuSai/app/ent/personal"
	"github.com/jirayuSai/app/ent/title"
)

// CustomerCreate is the builder for creating a Customer entity.
type CustomerCreate struct {
	config
	mutation *CustomerMutation
	hooks    []Hook
}

// SetCustomerName sets the CustomerName field.
func (cc *CustomerCreate) SetCustomerName(s string) *CustomerCreate {
	cc.mutation.SetCustomerName(s)
	return cc
}

// SetAddress sets the Address field.
func (cc *CustomerCreate) SetAddress(s string) *CustomerCreate {
	cc.mutation.SetAddress(s)
	return cc
}

// SetPhoneNumber sets the PhoneNumber field.
func (cc *CustomerCreate) SetPhoneNumber(s string) *CustomerCreate {
	cc.mutation.SetPhoneNumber(s)
	return cc
}

// SetGendersID sets the genders edge to Gender by id.
func (cc *CustomerCreate) SetGendersID(id int) *CustomerCreate {
	cc.mutation.SetGendersID(id)
	return cc
}

// SetNillableGendersID sets the genders edge to Gender by id if the given value is not nil.
func (cc *CustomerCreate) SetNillableGendersID(id *int) *CustomerCreate {
	if id != nil {
		cc = cc.SetGendersID(*id)
	}
	return cc
}

// SetGenders sets the genders edge to Gender.
func (cc *CustomerCreate) SetGenders(g *Gender) *CustomerCreate {
	return cc.SetGendersID(g.ID)
}

// SetPersonalsID sets the personals edge to Personal by id.
func (cc *CustomerCreate) SetPersonalsID(id int) *CustomerCreate {
	cc.mutation.SetPersonalsID(id)
	return cc
}

// SetNillablePersonalsID sets the personals edge to Personal by id if the given value is not nil.
func (cc *CustomerCreate) SetNillablePersonalsID(id *int) *CustomerCreate {
	if id != nil {
		cc = cc.SetPersonalsID(*id)
	}
	return cc
}

// SetPersonals sets the personals edge to Personal.
func (cc *CustomerCreate) SetPersonals(p *Personal) *CustomerCreate {
	return cc.SetPersonalsID(p.ID)
}

// SetTitlesID sets the titles edge to Title by id.
func (cc *CustomerCreate) SetTitlesID(id int) *CustomerCreate {
	cc.mutation.SetTitlesID(id)
	return cc
}

// SetNillableTitlesID sets the titles edge to Title by id if the given value is not nil.
func (cc *CustomerCreate) SetNillableTitlesID(id *int) *CustomerCreate {
	if id != nil {
		cc = cc.SetTitlesID(*id)
	}
	return cc
}

// SetTitles sets the titles edge to Title.
func (cc *CustomerCreate) SetTitles(t *Title) *CustomerCreate {
	return cc.SetTitlesID(t.ID)
}

// Mutation returns the CustomerMutation object of the builder.
func (cc *CustomerCreate) Mutation() *CustomerMutation {
	return cc.mutation
}

// Save creates the Customer in the database.
func (cc *CustomerCreate) Save(ctx context.Context) (*Customer, error) {
	if _, ok := cc.mutation.CustomerName(); !ok {
		return nil, &ValidationError{Name: "CustomerName", err: errors.New("ent: missing required field \"CustomerName\"")}
	}
	if _, ok := cc.mutation.Address(); !ok {
		return nil, &ValidationError{Name: "Address", err: errors.New("ent: missing required field \"Address\"")}
	}
	if _, ok := cc.mutation.PhoneNumber(); !ok {
		return nil, &ValidationError{Name: "PhoneNumber", err: errors.New("ent: missing required field \"PhoneNumber\"")}
	}
	var (
		err  error
		node *Customer
	)
	if len(cc.hooks) == 0 {
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CustomerCreate) SaveX(ctx context.Context) *Customer {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cc *CustomerCreate) sqlSave(ctx context.Context) (*Customer, error) {
	c, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	c.ID = int(id)
	return c, nil
}

func (cc *CustomerCreate) createSpec() (*Customer, *sqlgraph.CreateSpec) {
	var (
		c     = &Customer{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: customer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: customer.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.CustomerName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldCustomerName,
		})
		c.CustomerName = value
	}
	if value, ok := cc.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldAddress,
		})
		c.Address = value
	}
	if value, ok := cc.mutation.PhoneNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldPhoneNumber,
		})
		c.PhoneNumber = value
	}
	if nodes := cc.mutation.GendersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.GendersTable,
			Columns: []string{customer.GendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.PersonalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.PersonalsTable,
			Columns: []string{customer.PersonalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.TitlesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.TitlesTable,
			Columns: []string{customer.TitlesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: title.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return c, _spec
}
