// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/jirayuSai/app/ent/personal"
)

// Personal is the model entity for the Personal schema.
type Personal struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Email holds the value of the "Email" field.
	Email string `json:"Email,omitempty"`
	// Password holds the value of the "Password" field.
	Password string `json:"Password,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PersonalQuery when eager-loading is set.
	Edges PersonalEdges `json:"edges"`
}

// PersonalEdges holds the relations/edges for other nodes in the graph.
type PersonalEdges struct {
	// Customers holds the value of the customers edge.
	Customers []*Customer
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CustomersOrErr returns the Customers value or an error if the edge
// was not loaded in eager-loading.
func (e PersonalEdges) CustomersOrErr() ([]*Customer, error) {
	if e.loadedTypes[0] {
		return e.Customers, nil
	}
	return nil, &NotLoadedError{edge: "customers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Personal) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Name
		&sql.NullString{}, // Email
		&sql.NullString{}, // Password
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Personal fields.
func (pe *Personal) assignValues(values ...interface{}) error {
	if m, n := len(values), len(personal.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pe.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Name", values[0])
	} else if value.Valid {
		pe.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Email", values[1])
	} else if value.Valid {
		pe.Email = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Password", values[2])
	} else if value.Valid {
		pe.Password = value.String
	}
	return nil
}

// QueryCustomers queries the customers edge of the Personal.
func (pe *Personal) QueryCustomers() *CustomerQuery {
	return (&PersonalClient{config: pe.config}).QueryCustomers(pe)
}

// Update returns a builder for updating this Personal.
// Note that, you need to call Personal.Unwrap() before calling this method, if this Personal
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Personal) Update() *PersonalUpdateOne {
	return (&PersonalClient{config: pe.config}).UpdateOne(pe)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pe *Personal) Unwrap() *Personal {
	tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Personal is not a transactional entity")
	}
	pe.config.driver = tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Personal) String() string {
	var builder strings.Builder
	builder.WriteString("Personal(")
	builder.WriteString(fmt.Sprintf("id=%v", pe.ID))
	builder.WriteString(", Name=")
	builder.WriteString(pe.Name)
	builder.WriteString(", Email=")
	builder.WriteString(pe.Email)
	builder.WriteString(", Password=")
	builder.WriteString(pe.Password)
	builder.WriteByte(')')
	return builder.String()
}

// Personals is a parsable slice of Personal.
type Personals []*Personal

func (pe Personals) config(cfg config) {
	for _i := range pe {
		pe[_i].config = cfg
	}
}
