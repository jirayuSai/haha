// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/jirayuSai/app/ent/customer"
	"github.com/jirayuSai/app/ent/personal"
	"github.com/jirayuSai/app/ent/predicate"
)

// PersonalUpdate is the builder for updating Personal entities.
type PersonalUpdate struct {
	config
	hooks      []Hook
	mutation   *PersonalMutation
	predicates []predicate.Personal
}

// Where adds a new predicate for the builder.
func (pu *PersonalUpdate) Where(ps ...predicate.Personal) *PersonalUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetName sets the Name field.
func (pu *PersonalUpdate) SetName(s string) *PersonalUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetEmail sets the Email field.
func (pu *PersonalUpdate) SetEmail(s string) *PersonalUpdate {
	pu.mutation.SetEmail(s)
	return pu
}

// SetPassword sets the Password field.
func (pu *PersonalUpdate) SetPassword(s string) *PersonalUpdate {
	pu.mutation.SetPassword(s)
	return pu
}

// AddCustomerIDs adds the customers edge to Customer by ids.
func (pu *PersonalUpdate) AddCustomerIDs(ids ...int) *PersonalUpdate {
	pu.mutation.AddCustomerIDs(ids...)
	return pu
}

// AddCustomers adds the customers edges to Customer.
func (pu *PersonalUpdate) AddCustomers(c ...*Customer) *PersonalUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCustomerIDs(ids...)
}

// Mutation returns the PersonalMutation object of the builder.
func (pu *PersonalUpdate) Mutation() *PersonalMutation {
	return pu.mutation
}

// RemoveCustomerIDs removes the customers edge to Customer by ids.
func (pu *PersonalUpdate) RemoveCustomerIDs(ids ...int) *PersonalUpdate {
	pu.mutation.RemoveCustomerIDs(ids...)
	return pu
}

// RemoveCustomers removes customers edges to Customer.
func (pu *PersonalUpdate) RemoveCustomers(c ...*Customer) *PersonalUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCustomerIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PersonalUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PersonalUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PersonalUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PersonalUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PersonalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   personal.Table,
			Columns: personal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: personal.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personal.FieldName,
		})
	}
	if value, ok := pu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personal.FieldEmail,
		})
	}
	if value, ok := pu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personal.FieldPassword,
		})
	}
	if nodes := pu.mutation.RemovedCustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personal.CustomersTable,
			Columns: []string{personal.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personal.CustomersTable,
			Columns: []string{personal.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personal.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PersonalUpdateOne is the builder for updating a single Personal entity.
type PersonalUpdateOne struct {
	config
	hooks    []Hook
	mutation *PersonalMutation
}

// SetName sets the Name field.
func (puo *PersonalUpdateOne) SetName(s string) *PersonalUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetEmail sets the Email field.
func (puo *PersonalUpdateOne) SetEmail(s string) *PersonalUpdateOne {
	puo.mutation.SetEmail(s)
	return puo
}

// SetPassword sets the Password field.
func (puo *PersonalUpdateOne) SetPassword(s string) *PersonalUpdateOne {
	puo.mutation.SetPassword(s)
	return puo
}

// AddCustomerIDs adds the customers edge to Customer by ids.
func (puo *PersonalUpdateOne) AddCustomerIDs(ids ...int) *PersonalUpdateOne {
	puo.mutation.AddCustomerIDs(ids...)
	return puo
}

// AddCustomers adds the customers edges to Customer.
func (puo *PersonalUpdateOne) AddCustomers(c ...*Customer) *PersonalUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCustomerIDs(ids...)
}

// Mutation returns the PersonalMutation object of the builder.
func (puo *PersonalUpdateOne) Mutation() *PersonalMutation {
	return puo.mutation
}

// RemoveCustomerIDs removes the customers edge to Customer by ids.
func (puo *PersonalUpdateOne) RemoveCustomerIDs(ids ...int) *PersonalUpdateOne {
	puo.mutation.RemoveCustomerIDs(ids...)
	return puo
}

// RemoveCustomers removes customers edges to Customer.
func (puo *PersonalUpdateOne) RemoveCustomers(c ...*Customer) *PersonalUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCustomerIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (puo *PersonalUpdateOne) Save(ctx context.Context) (*Personal, error) {

	var (
		err  error
		node *Personal
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PersonalUpdateOne) SaveX(ctx context.Context) *Personal {
	pe, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pe
}

// Exec executes the query on the entity.
func (puo *PersonalUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PersonalUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PersonalUpdateOne) sqlSave(ctx context.Context) (pe *Personal, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   personal.Table,
			Columns: personal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: personal.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Personal.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personal.FieldName,
		})
	}
	if value, ok := puo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personal.FieldEmail,
		})
	}
	if value, ok := puo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personal.FieldPassword,
		})
	}
	if nodes := puo.mutation.RemovedCustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personal.CustomersTable,
			Columns: []string{personal.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personal.CustomersTable,
			Columns: []string{personal.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pe = &Personal{config: puo.config}
	_spec.Assign = pe.assignValues
	_spec.ScanValues = pe.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personal.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pe, nil
}
